(f 10)
; f(10, 20)
(f 10 20)
f
x
name
(define y 10)
y
f
(define 陈权业是 "潘华能")
(define 陈权业是 "潘华能的")
陈权业是
(define 我想要说的话 "陈权业是潘华能的")
我想要说的话



32
我
我想要说的话
(let loop ())
潘华能
(define a 32)
(define a 3242)
a
(fib 100)
(fib 1001)
(fib 10012111)
(fib 1001211)
(fib 100121)
(ctype? _int)
(ctype? (_fun _int -> _int))
(ctype? (-> _fun _int _int))
(ctype? #f)
(ctype? "foo")
(ctype? 1)
(ctype-sizeof _int)
(ctype-sizeof _uint64)
(ctype-sizeof "hi")
(ctype->layout _int)
(ctype->layout (_fun -> _int))
(ctype->layout (_fun))
(ctype->layout (_fun -> _void))
(ctype? _void)
(compiler-sizeof 'int)
(ctype? _uint64)
(define _snappy_status)
(define _snappy_status
                (_enum '(ok = 0
                            invalide_input
                            buffer_too_small)))
_snappy_status
_int
(ctype? _snappy_status)
(ctype-layout _snappy_status)
(ctype->layout _snappy_status)
ok
_ok
(write-json 32)
(write-json "{}")
(write-json (hasheq 'a 1 'b 'hello))
(write-json (hasheq 'a 1 'b "hello"))
(jexpr->string (hasheq 'a 1 'b "hello"))
(jsexpr->string (hasheq 'a 1 'b "hello"))
jsexpr->string
(require json)
jsexpr->string
(require json)
(jsexpr->string (hasheq 'a 1 'b "hello"))
_void
(ctype? _void)
(ctype? _int)
_pointer
_cpointer
(define *size* 256)
(define buffer (malloc 'raw *size*))
malloc
(require ffi/unsafe)
malloc
(define buffer (malloc 'raw *size*))
buffer
(memset 0 *size*)
memset
(memset buffer 0 *size*)
buffer
(cast buffer _pointer _string)
buffer
(free buffer)
(free buffer)
(require ffi/unsafe)
(define block (malloc _int 5))
block
(ptr-set! block _int 0 196353)
(map (lambda (i) (ptr-ref block _byte i)) '(0 1 2 3))
_void
_int8
_int
_bool
_float
_logn
_long
_scheme
_racket
_path
_symbol
_uint
_uint32
_uint64
_file
_string/utf-8
_string/eof
_enum
_bitnask
_bitmask
make-ctype
(define v (make-cvector _int 10))
(require ffi/unsafe/define)
(define v (make-cvector _int 10))
(require ffi/cvector)
(define v (make-cvector _int 10))
v
(cvector-length v)
(cvector-set! v 5 55)
(cvector-set! v 15 55)
(cvector-ref v 5)
(cvector-ref v 9)
(cvector-ref v 0)
(cvector-ref v 1)
(cvector-ref v 2)
(cvector-ref v 5)
(define-cstruct _foo)
(define-cstruct _foo
    ((x _int) (y _double)))
_foo
(define x (make-foo 1 2.3))
x
(foo? x)
(list (foo-x x) (foo-y x))
(set-foo-y! x 4.5)
(list (foo-x x) (foo-y x))
(define (_cprocedure itypes otypes)
    (make-ctype _pointer
                (lambda (x) (ffi-callback x itypes otypes))
                (lambda (x) (ffi-call x itypes otypes))))
_cprocedure
(_cprocedure 2 4)
((get-ffi-obj "get" "libc.dylib"))
((get-ffi-obj "get" "libc.so"))
((get-ffi-obj "get" "libSystem.B.dylib"))
((get-ffi-obj "get" "libSystem.dylib"))
((get-ffi-obj "get" "libc.dylib"))
bt-surface
bt
bt
_foo
_TIMCommCallback
(require ffi/unsafe)
_void
_TIM
_TIMCommCallback_pointer
